---
import type { ImageMetadata } from 'astro'
import { Image } from 'astro:assets'
import fs, { constants } from 'node:fs'
import path from 'node:path'
import { Readable } from 'node:stream'

interface BookwormBook {
  id: string
  title: string
  description: string
  cover: {
    url: string
  }
}

export interface Props {
  listId: string
}

const { listId } = Astro.props

async function downloadCover(book: BookwormBook) {
  const response = await fetch(book.cover.url)

  if (!response.ok) {
    throw new Error(`Response status: ${response.status}`)
  }
  const fileTitle = book.id.split('/').pop()
  const fileExt = book.cover.url.split('.').pop()
  const filePath = path.join('src/assets/bookCovers', `${fileTitle}.${fileExt}`)

  fs.access(filePath, constants.F_OK, (err) => {
    if (err) {
      const fileStream = fs.createWriteStream(filePath)

      if (response.body) Readable.from(response.body).pipe(fileStream)
      console.log(`Downloaded ${filePath}.`)
    }
  })

  return filePath
}

async function loadBookwyrmListPage(
  pageNumber: number
): Promise<BookwormBook[]> {
  const response = await fetch(
    `https://bookwyrm.social/list/${listId}?page=${pageNumber}`,
    {
      headers: {
        Accept: 'application/json'
      }
    }
  )

  if (!response.ok) {
    throw new Error(`Response status: ${response.status}`)
  }

  let page = (await response.json()) as { orderedItems: BookwormBook[] }

  return page.orderedItems
}

async function loadBookwyrmList() {
  const response = await fetch(`https://bookwyrm.social/list/${listId}`, {
    headers: {
      Accept: 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(`Response status: ${response.status}`)
  }

  const { totalItems, summary, name } = (await response.json()) as {
    totalItems: number
    name: string
    summary: string
  }

  let page = 0

  let loadedBooks: BookwormBook[] = []

  while (loadedBooks.length < totalItems) {
    page += 1
    loadedBooks = loadedBooks.concat(await loadBookwyrmListPage(page))
  }

  return {
    books: Promise.all(
      loadedBooks.map(async (book) => ({
        ...book,
        cover: { url: await downloadCover(book) }
      }))
    ),
    name,
    summary
  }
}

const bookList = await loadBookwyrmList()

const rawBooks = await bookList.books

const bookCovers = import.meta.glob<{ default: ImageMetadata }>(
  '/src/assets/bookCovers/*'
)

const books = rawBooks.map((book) => ({
  title: book.title,
  href: book.id,
  cover: bookCovers[`/${book.cover.url}`]()
}))
---

<h2>{bookList.name}</h2>

<div class="flex flex-wrap justify-around gap-4">
  {
    books.map(({ href, cover, title }) => (
      <a {href} target="_blank">
        <Image
          src={cover}
          {title}
          height={216}
          width={140}
          style="height:216px; width:auto;"
          class="m-0"
          alt={`${title} cover`}
        />
      </a>
    ))
  }
</div>
